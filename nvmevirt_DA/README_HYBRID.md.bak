# NVMeVirt 混合 SLC/QLC 存储实现

本项目基于 [NVMeVirt](https://github.com/yuhun-Jun/nvmevirt_DA) 实现了混合 SLC/QLC 存储模拟器，支持热数据跟踪、自动迁移和不同延迟模拟。

## 🚀 主要特性

### ✨ 混合存储架构
- **SLC 缓存层**：20% 容量，高性能写入
- **QLC 存储层**：80% 容量，大容量存储
- **智能迁移**：自动将冷数据从 SLC 迁移到 QLC

### 🔥 热数据管理
- **访问跟踪**：记录每个页面的访问次数和时间
- **迁移策略**：基于访问模式的智能迁移算法
- **性能优化**：热数据保持在高速 SLC 中

### ⚡ 性能差异化
- **SLC 延迟**：原有的高性能参数
- **QLC 延迟**：读延迟 2.5-3 倍，写延迟 4 倍，擦除延迟 3 倍
- **真实模拟**：基于实际硬件特性的延迟建模

## 📁 文件修改概览

### 核心修改文件
```
├── ssd_config.h          # 添加 QLC 延迟参数定义
├── ssd.h                 # 扩展延迟参数结构
├── ssd.c                 # 实现 SLC/QLC 延迟差异化
├── conv_ftl.h            # 添加混合存储数据结构
└── conv_ftl.c            # 实现核心混合存储逻辑
```

### 新增文件
```
├── HYBRID_SSD_CONFIG.md  # 详细配置说明
├── README_HYBRID.md      # 本文档
├── test_hybrid_ssd.sh    # 自动化测试脚本
└── quick_fix.sh          # 快速修复脚本
```

## 🛠️ 快速开始

### 1. 一键修复和编译
```bash
./quick_fix.sh
```

### 2. 手动编译（如果需要）
```bash
make clean
make APPROACH=on
```

### 3. 运行测试
```bash
sudo ./test_hybrid_ssd.sh
```

## 📊 关键配置参数

### 容量分配（ssd_config.h）
```c
#define SLC_CAPACITY_PERCENT (20)  // SLC 20%
#define QLC_CAPACITY_PERCENT (80)  // QLC 80%
#define QLC_REGIONS (4)            // QLC 4 个区域
```

### 延迟参数（ssd_config.h）
```c
#define QLC_PROG_LATENCY (185000 * 4)      // QLC 写延迟是 SLC 的 4 倍
#define QLC_ERASE_LATENCY (3000000)        // QLC 擦除延迟是 SLC 的 3 倍
#define MIGRATION_THRESHOLD (10)           // 迁移访问次数阈值
```

## 🔧 工作原理

### 写入流程
1. **初次写入** → SLC（使用 Die Affinity）
2. **热数据跟踪** → 记录访问模式
3. **后台迁移** → 冷数据迁移到 QLC
4. **区域轮询** → QLC 4 区域均衡写入

### 读取流程
1. **位置检测** → 判断数据在 SLC 还是 QLC
2. **延迟差异** → 使用对应的延迟参数
3. **热度更新** → 更新访问计数和时间

### 迁移触发条件
- 长时间未访问（>1秒）
- 访问次数低于阈值（<10次）
- SLC 空间不足时优先迁移

## 📈 性能预期

| 操作类型 | SLC 性能 | QLC 性能 | 性能比 |
|---------|----------|----------|--------|
| 4KB 读取 | ~30μs    | ~75μs    | 2.5x   |
| 页面读取 | ~36μs    | ~108μs   | 3x     |
| 页面写入 | ~185μs   | ~740μs   | 4x     |
| 块擦除   | 1ms      | 3ms      | 3x     |

## 🧪 测试场景

### 自动化测试包含
1. **顺序写入测试** - 验证 SLC 写入性能
2. **随机写入测试** - 验证 Die Affinity 工作
3. **读取测试** - 验证延迟差异化
4. **混合读写测试** - 触发迁移机制

### 监控指标
```bash
# 查看实时统计
dmesg | grep -E "(SLC|QLC|Migration|Write Stats)"

# 预期输出示例
[nvmev] SLC blocks per plane: 1638 (20%), QLC blocks per plane: 6554 (80%)
[nvmev] Write Stats: SLC writes=10000, QLC writes=0, Migrations=150
[nvmev] Migrated LPN 12345 from SLC to QLC region 2
```

## 🎛️ 调优建议

### 提高 SLC 比例（适合写入密集型）
```c
#define SLC_CAPACITY_PERCENT (30)
#define QLC_CAPACITY_PERCENT (70)
```

### 调整迁移策略（适合不同工作负载）
```c
#define MIGRATION_THRESHOLD (20)   // 提高阈值，减少迁移
```

### 增加 QLC 区域数（提高并发性）
```c
#define QLC_REGIONS (8)            // 更多区域，更好的并发
```

## 🐛 故障排除

### 编译问题
```bash
# 安装内核头文件
sudo apt install linux-headers-$(uname -r)

# 清理重新编译
make clean && make APPROACH=on
```

### 运行时问题
```bash
# 检查内存预留
cat /proc/meminfo | grep Hugepages

# 检查模块状态
lsmod | grep nvmev

# 查看详细日志
dmesg | tail -50
```

### 性能问题
- 确认 DIEAFFINITY=1 已启用
- 检查 CPU 绑定是否正确
- 监控迁移频率是否合理

## 📚 参考资料

- [原始 NVMeVirt 项目](https://github.com/yuhun-Jun/nvmevirt_DA)
- [FAST '24 论文](https://github.com/yuhun-Jun/fast24_ae)
- [配置详细说明](HYBRID_SSD_CONFIG.md)

## 🤝 贡献和支持

如果您在使用过程中遇到问题或有改进建议，请：

1. 查看 [HYBRID_SSD_CONFIG.md](HYBRID_SSD_CONFIG.md) 获取详细配置说明
2. 运行 `./quick_fix.sh` 尝试自动修复
3. 检查 dmesg 日志获取更多信息

---

**注意**：此实现主要用于研究和教学目的，在生产环境中使用前请进行充分测试。 